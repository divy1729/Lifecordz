{"ast":null,"code":"import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridEditModes, GridRowModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector, gridRowIsEditingSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridRowsLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from \"../../../models/params/gridRowParams.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const prevRowValuesLookup = React.useRef({});\n  const focusTimeout = React.useRef(undefined);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      if (nextFocusedCell.current?.id !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    const isEditing = gridRowIsEditingSelector(apiRef, {\n      rowId: id,\n      editMode: props.editMode\n    });\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const row = apiRef.current.getRow(id);\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      const column = apiRef.current.getColumn(field);\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        if (deleteValue) {\n          newValue = getDefaultCellValue(column);\n        } else if (initialValue) {\n          newValue = initialValue;\n        }\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: !!column.preProcessEditCellProps && deleteValue\n      };\n      return acc;\n    }, {});\n    prevRowValuesLookup.current[id] = row;\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n    columnFields.filter(field => !!apiRef.current.getColumn(field).preProcessEditCellProps && deleteValue).forEach(field => {\n      const column = apiRef.current.getColumn(field);\n      const value = apiRef.current.getCellValue(id, field);\n      const newValue = deleteValue ? getDefaultCellValue(column) : initialValue ?? value;\n      Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps[field],\n        hasChanged: newValue !== value\n      })).then(processedProps => {\n        // Check if still in edit mode before updating\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          const editingState = gridEditRowsStateSelector(apiRef.current.state);\n          updateOrDeleteFieldState(id, field, _extends({}, processedProps, {\n            value: editingState[id][field].value,\n            isProcessingProps: false\n          }));\n        }\n      });\n    });\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n      delete prevRowValuesLookup.current[id];\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = prevRowValuesLookup.current[id];\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        // The row might have been deleted\n        if (prevRowModesModel.current[id]) {\n          prevRowModesModel.current[id].mode = GridRowModes.Edit;\n          // Revert the mode in the rowModesModel prop back to \"edit\"\n          updateRowInRowModesModel(id, {\n            mode: GridRowModes.Edit\n          });\n        }\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, prevRowValuesLookup.current[id], row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      // Column might have been removed\n      // see https://github.com/mui/mui-x/pull/16888\n      if (column?.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      const params = rowModesModel[id] ?? {\n        mode: GridRowModes.View\n      };\n      const prevMode = copyOfPrevRowModesModel[id]?.mode || GridRowModes.View;\n      const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","unstable_useEnhancedEffect","useEnhancedEffect","warnOnce","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","gridRowIsEditingSelector","isPrintableKey","isPasteShortcut","gridColumnFieldsSelector","gridVisibleColumnFieldsSelector","gridRowsLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","GRID_ACTIONS_COLUMN_TYPE","getDefaultCellValue","useGridRowEditing","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","prevRowValuesLookup","focusTimeout","undefined","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","runIfEditModeIsRow","callback","args","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","hasFieldsWithErrors","rowId","editingState","state","Object","values","some","fieldProps","error","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","column","getColumn","type","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","index","findIndex","nextFieldToFocus","setCellFocus","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","deleteValue","startRowEditMode","handleRowEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopRowEditMode","onRowEditStart","onRowEditStop","isEditing","updateRowModesModel","newModel","isNewModelDifferentFromProp","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","keys","other","updateStateToStartRowEditMode","initialValue","row","reduce","acc","newValue","getCellValue","value","isProcessingProps","preProcessEditCellProps","forEach","Promise","resolve","hasChanged","then","processedProps","updateStateToStopRowEditMode","focusedField","finishRowEditMode","moveFocusToRelativeCell","isSomeFieldProcessingProps","rowUpdate","getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","process","env","NODE_ENV","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","parsedValue","valueParser","changeReason","promises","_editingState$id","otherFieldsProps","map","promise","push","entries","thisField","fieldColumn","_editingState$id2","all","valueSetter","editingApi","editingPrivateApi","rowsLookup","copyOfPrevRowModesModel","ids","Set","Array","from","prevMode","originalId","getRowId"],"sources":["/Users/divyanshsaxena/Desktop/Lifecordz/frontend/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridEditModes, GridRowModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector, gridRowIsEditingSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridRowsLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from \"../../../models/params/gridRowParams.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const prevRowValuesLookup = React.useRef({});\n  const focusTimeout = React.useRef(undefined);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      if (nextFocusedCell.current?.id !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    const isEditing = gridRowIsEditingSelector(apiRef, {\n      rowId: id,\n      editMode: props.editMode\n    });\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const row = apiRef.current.getRow(id);\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      const column = apiRef.current.getColumn(field);\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        if (deleteValue) {\n          newValue = getDefaultCellValue(column);\n        } else if (initialValue) {\n          newValue = initialValue;\n        }\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: !!column.preProcessEditCellProps && deleteValue\n      };\n      return acc;\n    }, {});\n    prevRowValuesLookup.current[id] = row;\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n    columnFields.filter(field => !!apiRef.current.getColumn(field).preProcessEditCellProps && deleteValue).forEach(field => {\n      const column = apiRef.current.getColumn(field);\n      const value = apiRef.current.getCellValue(id, field);\n      const newValue = deleteValue ? getDefaultCellValue(column) : initialValue ?? value;\n      Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps[field],\n        hasChanged: newValue !== value\n      })).then(processedProps => {\n        // Check if still in edit mode before updating\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          const editingState = gridEditRowsStateSelector(apiRef.current.state);\n          updateOrDeleteFieldState(id, field, _extends({}, processedProps, {\n            value: editingState[id][field].value,\n            isProcessingProps: false\n          }));\n        }\n      });\n    });\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n      delete prevRowValuesLookup.current[id];\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = prevRowValuesLookup.current[id];\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        // The row might have been deleted\n        if (prevRowModesModel.current[id]) {\n          prevRowModesModel.current[id].mode = GridRowModes.Edit;\n          // Revert the mode in the rowModesModel prop back to \"edit\"\n          updateRowInRowModesModel(id, {\n            mode: GridRowModes.Edit\n          });\n        }\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, prevRowValuesLookup.current[id], row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      // Column might have been removed\n      // see https://github.com/mui/mui-x/pull/16888\n      if (column?.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      const params = rowModesModel[id] ?? {\n        mode: GridRowModes.View\n      };\n      const prevMode = copyOfPrevRowModesModel[id]?.mode || GridRowModes.View;\n      const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}